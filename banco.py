# -*- coding: utf-8 -*-
"""arquivo_banco.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10Ll6IxmIj-MKixmZ3d-p_erGCjqa0hem

# **essa nao**
"""

# !pip install pyinstaller

# !pyinstaller --onefile banco.py

# !pip install pathlib

import json
import os
from datetime import datetime
import pytz # Import the pytz module

class ContaBancaria:
    def __init__(self, saldo_inicial=0, usuario=None):
        self.saldo = saldo_inicial
        self.transacoes = []
        self.usuario = usuario
        self.carregar_extrato()  # Carrega o saldo ao inicializar

    def sacar(self, valor):
        if valor > self.saldo:
            print("Erro: Saldo insuficiente para realizar o saque.")
        else:
            self.saldo -= valor
            self.registrar_transacao("Saque", valor)
            print(f"Saque de R${valor:.2f} realizado com sucesso.")
            print(f"Saldo atual: R${self.saldo:.2f}")

    def depositar(self, valor):
        self.saldo += valor
        self.registrar_transacao("Depósito", valor)
        print(f"Depósito de R${valor:.2f} realizado com sucesso.")
        print(f"Saldo atual: R${self.saldo:.2f}")

    def registrar_transacao(self, tipo, valor):
        fuso_horario_brasilia = pytz.timezone('America/Sao_Paulo')
        data_atual = datetime.now(fuso_horario_brasilia).strftime('%d/%m/%Y %H:%M:%S')  # Data e hora no fuso de Brasília
        transacao = {
            "usuario": self.usuario,
            "tipo": tipo,
            "valor": valor,
            "saldo_atual": self.saldo,
            "data": data_atual  # Adiciona a data da transação
        }
        self.transacoes.append(transacao)
        self.salvar_transacoes()
        self.salvar_transacao_geral(transacao)
        self.salvar_extrato()

    def salvar_transacoes(self):
        with open(f'cliente_{self.usuario}.json', 'w') as arquivo:
            json.dump(self.transacoes, arquivo, indent=4)

    def salvar_transacao_geral(self, transacao):
        if os.path.exists('Todos_os_Clientes.json'):
            with open('Todos_os_Clientes.json', 'r') as arquivo:
                transacoes_gerais = json.load(arquivo)
        else:
            transacoes_gerais = []

        transacoes_gerais.append(transacao)

        with open('Todos_os_Clientes.json', 'w') as arquivo:
            json.dump(transacoes_gerais, arquivo, indent=4)

    def salvar_extrato(self):
        with open(f'extrato_{self.usuario}.json', 'w') as arquivo:
            json.dump({"extrato": self.saldo, "transacoes": self.transacoes}, arquivo, indent=4)

    def carregar_extrato(self):
        if os.path.exists(f'extrato_{self.usuario}.json'):
            with open(f'extrato_{self.usuario}.json', 'r') as arquivo:
                dados = json.load(arquivo)
                self.saldo = dados.get("extrato", 0)
                self.transacoes = dados.get("transacoes", [])

def autenticar_usuario(usuarios):
    usuario = input("Digite seu nome de usuário: ")
    senha = input("Digite sua senha: ")

    if usuario in usuarios and usuarios[usuario]['senha'] == senha:
        return usuario
    else:
        print("Usuário ou senha inválidos.")
        return None

def main():
    usuarios = {
        "01": {"senha": "01", "conta": ContaBancaria(0, "01")},
        "02": {"senha": "02", "conta": ContaBancaria(0, "02")},
        "03": {"senha": "03", "conta": ContaBancaria(0, "03")}
    }

    usuario = autenticar_usuario(usuarios)
    if usuario:
        conta = usuarios[usuario]['conta']

        while True:
            print("\nEscolha uma opção:")
            print("1. Sacar")
            print("2. Depositar")
            print("3. Consultar Saldo")
            print("4. Consultar Transações")
            print("5. Sair")

            opcao = input("Digite o número da opção desejada: ")

            if opcao == '1':
                valor_saque = float(input("Digite o valor a ser sacado: R$"))
                conta.sacar(valor_saque)
            elif opcao == '2':
                valor_deposito = float(input("Digite o valor a ser depositado: R$"))
                conta.depositar(valor_deposito)
            elif opcao == '3':
                print(f"Saldo atual: R${conta.saldo:.2f}")
            elif opcao == '4':
                print("\nTransações:")
                for transacao in conta.transacoes:
                    print(f"{transacao['data']} - {transacao['tipo']}: R${transacao['valor']:.2f} | Saldo após transação: R${transacao['saldo_atual']:.2f}")
            elif opcao == '5':
                print("Saindo do sistema...")
                break
            else:
                print("Opção inválida. Tente novamente.")

if __name__ == "__main__":
    main()

!pip install pytz